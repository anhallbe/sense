{"name":"Sense","tagline":"Middleware for sensor networks and ubiquitous computing","body":"##What is this?\r\nA piece of middleware that lets your toaster notify your phone about how your friend's shoes just realized that correlation sometimes imply causation. It's also a project for my Ubuquitous Computing class.\r\n\r\n##jSense\r\nA Java client library that lets the user send/receive sensor data in a decoupled way. The idea is that sensors/agents can be added to the system without (re-)configuring any of the existing components. Subscriptions are made through Lucene-like search queries.\r\n\r\n###Example subscriber:\r\n```java\r\n  SenseService service = new SenseService(SenseService.INTERVAL_FAST, false);\r\n  service.subscribe(\"description:(home AND temperature)\", new UpdateListener() {\r\n      onUpdate(SensorPup update) {\r\n          print(\"The temperature in my home is \" + update.getValue());\r\n      }\r\n  });\r\n  service.start();\r\n```\r\n\r\n###Example publisher:\r\n```java\r\n  SenseService service = new SenseService();\r\n  //Get some sensor reading from hardware/software\r\n  HomeTemperatureUpdate update = new HomeTemperatureUpdate( //This class should extend SensorPub\r\n      \"KitchenTemperature\",       //name\r\n      \"This gives the temperature of the kitchen in my home for some reason\", //description\r\n      SensorPup.INTEGER,          //The type of value (integer, boolean, geoLoc etc..)\r\n      100);                       //It's hot in herre\r\n  service.publish(update);\r\n```\r\n\r\n\r\n##Sense Server\r\nA web server built with Node, Sails and ElasticSearch. The server API allows various sensors to publish and/or subscribe to data changes.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}